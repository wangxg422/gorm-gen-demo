// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/dal/model"
)

func newAppInstance(db *gorm.DB, opts ...gen.DOOption) appInstance {
	_appInstance := appInstance{}

	_appInstance.appInstanceDo.UseDB(db, opts...)
	_appInstance.appInstanceDo.UseModel(&model.AppInstance{})

	tableName := _appInstance.appInstanceDo.TableName()
	_appInstance.ALL = field.NewAsterisk(tableName)
	_appInstance.ID = field.NewInt64(tableName, "id")
	_appInstance.AppID = field.NewString(tableName, "app_id")
	_appInstance.AppPackageID = field.NewInt64(tableName, "app_package_id")
	_appInstance.AppName = field.NewString(tableName, "app_name")
	_appInstance.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_appInstance.Desc = field.NewString(tableName, "desc")
	_appInstance.Status = field.NewInt32(tableName, "status")
	_appInstance.DelFlag = field.NewField(tableName, "del_flag")
	_appInstance.CreateTime = field.NewTime(tableName, "create_time")
	_appInstance.UpdateTime = field.NewTime(tableName, "update_time")
	_appInstance.DeleteTime = field.NewTime(tableName, "delete_time")
	_appInstance.Remark = field.NewString(tableName, "remark")
	_appInstance.CreateUser = appInstanceBelongsToCreateUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreateUser", "model.User"),
	}

	_appInstance.AppPackage = appInstanceBelongsToAppPackage{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AppPackage", "model.AppPackage"),
	}

	_appInstance.fillFieldMap()

	return _appInstance
}

type appInstance struct {
	appInstanceDo appInstanceDo

	ALL          field.Asterisk
	ID           field.Int64
	AppID        field.String // app实例id
	AppPackageID field.Int64  // 安装包id
	AppName      field.String // app实例名称
	CreateUserID field.Int64  // 创建用户
	Desc         field.String // app描述
	Status       field.Int32  // 0正常1停止
	DelFlag      field.Field  // 0可用1已删除
	CreateTime   field.Time
	UpdateTime   field.Time
	DeleteTime   field.Time
	Remark       field.String // 备注
	CreateUser   appInstanceBelongsToCreateUser

	AppPackage appInstanceBelongsToAppPackage

	fieldMap map[string]field.Expr
}

func (a appInstance) Table(newTableName string) *appInstance {
	a.appInstanceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appInstance) As(alias string) *appInstance {
	a.appInstanceDo.DO = *(a.appInstanceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appInstance) updateTableName(table string) *appInstance {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AppID = field.NewString(table, "app_id")
	a.AppPackageID = field.NewInt64(table, "app_package_id")
	a.AppName = field.NewString(table, "app_name")
	a.CreateUserID = field.NewInt64(table, "create_user_id")
	a.Desc = field.NewString(table, "desc")
	a.Status = field.NewInt32(table, "status")
	a.DelFlag = field.NewField(table, "del_flag")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.DeleteTime = field.NewTime(table, "delete_time")
	a.Remark = field.NewString(table, "remark")

	a.fillFieldMap()

	return a
}

func (a *appInstance) WithContext(ctx context.Context) IAppInstanceDo {
	return a.appInstanceDo.WithContext(ctx)
}

func (a appInstance) TableName() string { return a.appInstanceDo.TableName() }

func (a appInstance) Alias() string { return a.appInstanceDo.Alias() }

func (a appInstance) Columns(cols ...field.Expr) gen.Columns { return a.appInstanceDo.Columns(cols...) }

func (a *appInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appInstance) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["app_package_id"] = a.AppPackageID
	a.fieldMap["app_name"] = a.AppName
	a.fieldMap["create_user_id"] = a.CreateUserID
	a.fieldMap["desc"] = a.Desc
	a.fieldMap["status"] = a.Status
	a.fieldMap["del_flag"] = a.DelFlag
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["delete_time"] = a.DeleteTime
	a.fieldMap["remark"] = a.Remark

}

func (a appInstance) clone(db *gorm.DB) appInstance {
	a.appInstanceDo.ReplaceConnPool(db.Statement.ConnPool)
	a.CreateUser.db = db.Session(&gorm.Session{Initialized: true})
	a.CreateUser.db.Statement.ConnPool = db.Statement.ConnPool
	a.AppPackage.db = db.Session(&gorm.Session{Initialized: true})
	a.AppPackage.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a appInstance) replaceDB(db *gorm.DB) appInstance {
	a.appInstanceDo.ReplaceDB(db)
	a.CreateUser.db = db.Session(&gorm.Session{})
	a.AppPackage.db = db.Session(&gorm.Session{})
	return a
}

type appInstanceBelongsToCreateUser struct {
	db *gorm.DB

	field.RelationField
}

func (a appInstanceBelongsToCreateUser) Where(conds ...field.Expr) *appInstanceBelongsToCreateUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a appInstanceBelongsToCreateUser) WithContext(ctx context.Context) *appInstanceBelongsToCreateUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a appInstanceBelongsToCreateUser) Session(session *gorm.Session) *appInstanceBelongsToCreateUser {
	a.db = a.db.Session(session)
	return &a
}

func (a appInstanceBelongsToCreateUser) Model(m *model.AppInstance) *appInstanceBelongsToCreateUserTx {
	return &appInstanceBelongsToCreateUserTx{a.db.Model(m).Association(a.Name())}
}

func (a appInstanceBelongsToCreateUser) Unscoped() *appInstanceBelongsToCreateUser {
	a.db = a.db.Unscoped()
	return &a
}

type appInstanceBelongsToCreateUserTx struct{ tx *gorm.Association }

func (a appInstanceBelongsToCreateUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a appInstanceBelongsToCreateUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a appInstanceBelongsToCreateUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a appInstanceBelongsToCreateUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a appInstanceBelongsToCreateUserTx) Clear() error {
	return a.tx.Clear()
}

func (a appInstanceBelongsToCreateUserTx) Count() int64 {
	return a.tx.Count()
}

func (a appInstanceBelongsToCreateUserTx) Unscoped() *appInstanceBelongsToCreateUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type appInstanceBelongsToAppPackage struct {
	db *gorm.DB

	field.RelationField
}

func (a appInstanceBelongsToAppPackage) Where(conds ...field.Expr) *appInstanceBelongsToAppPackage {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a appInstanceBelongsToAppPackage) WithContext(ctx context.Context) *appInstanceBelongsToAppPackage {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a appInstanceBelongsToAppPackage) Session(session *gorm.Session) *appInstanceBelongsToAppPackage {
	a.db = a.db.Session(session)
	return &a
}

func (a appInstanceBelongsToAppPackage) Model(m *model.AppInstance) *appInstanceBelongsToAppPackageTx {
	return &appInstanceBelongsToAppPackageTx{a.db.Model(m).Association(a.Name())}
}

func (a appInstanceBelongsToAppPackage) Unscoped() *appInstanceBelongsToAppPackage {
	a.db = a.db.Unscoped()
	return &a
}

type appInstanceBelongsToAppPackageTx struct{ tx *gorm.Association }

func (a appInstanceBelongsToAppPackageTx) Find() (result *model.AppPackage, err error) {
	return result, a.tx.Find(&result)
}

func (a appInstanceBelongsToAppPackageTx) Append(values ...*model.AppPackage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a appInstanceBelongsToAppPackageTx) Replace(values ...*model.AppPackage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a appInstanceBelongsToAppPackageTx) Delete(values ...*model.AppPackage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a appInstanceBelongsToAppPackageTx) Clear() error {
	return a.tx.Clear()
}

func (a appInstanceBelongsToAppPackageTx) Count() int64 {
	return a.tx.Count()
}

func (a appInstanceBelongsToAppPackageTx) Unscoped() *appInstanceBelongsToAppPackageTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type appInstanceDo struct{ gen.DO }

type IAppInstanceDo interface {
	gen.SubQuery
	Debug() IAppInstanceDo
	WithContext(ctx context.Context) IAppInstanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppInstanceDo
	WriteDB() IAppInstanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppInstanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppInstanceDo
	Not(conds ...gen.Condition) IAppInstanceDo
	Or(conds ...gen.Condition) IAppInstanceDo
	Select(conds ...field.Expr) IAppInstanceDo
	Where(conds ...gen.Condition) IAppInstanceDo
	Order(conds ...field.Expr) IAppInstanceDo
	Distinct(cols ...field.Expr) IAppInstanceDo
	Omit(cols ...field.Expr) IAppInstanceDo
	Join(table schema.Tabler, on ...field.Expr) IAppInstanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppInstanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppInstanceDo
	Group(cols ...field.Expr) IAppInstanceDo
	Having(conds ...gen.Condition) IAppInstanceDo
	Limit(limit int) IAppInstanceDo
	Offset(offset int) IAppInstanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppInstanceDo
	Unscoped() IAppInstanceDo
	Create(values ...*model.AppInstance) error
	CreateInBatches(values []*model.AppInstance, batchSize int) error
	Save(values ...*model.AppInstance) error
	First() (*model.AppInstance, error)
	Take() (*model.AppInstance, error)
	Last() (*model.AppInstance, error)
	Find() ([]*model.AppInstance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppInstance, err error)
	FindInBatches(result *[]*model.AppInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppInstance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppInstanceDo
	Assign(attrs ...field.AssignExpr) IAppInstanceDo
	Joins(fields ...field.RelationField) IAppInstanceDo
	Preload(fields ...field.RelationField) IAppInstanceDo
	FirstOrInit() (*model.AppInstance, error)
	FirstOrCreate() (*model.AppInstance, error)
	FindByPage(offset int, limit int) (result []*model.AppInstance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppInstanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appInstanceDo) Debug() IAppInstanceDo {
	return a.withDO(a.DO.Debug())
}

func (a appInstanceDo) WithContext(ctx context.Context) IAppInstanceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appInstanceDo) ReadDB() IAppInstanceDo {
	return a.Clauses(dbresolver.Read)
}

func (a appInstanceDo) WriteDB() IAppInstanceDo {
	return a.Clauses(dbresolver.Write)
}

func (a appInstanceDo) Session(config *gorm.Session) IAppInstanceDo {
	return a.withDO(a.DO.Session(config))
}

func (a appInstanceDo) Clauses(conds ...clause.Expression) IAppInstanceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appInstanceDo) Returning(value interface{}, columns ...string) IAppInstanceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appInstanceDo) Not(conds ...gen.Condition) IAppInstanceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appInstanceDo) Or(conds ...gen.Condition) IAppInstanceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appInstanceDo) Select(conds ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appInstanceDo) Where(conds ...gen.Condition) IAppInstanceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appInstanceDo) Order(conds ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appInstanceDo) Distinct(cols ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appInstanceDo) Omit(cols ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appInstanceDo) Join(table schema.Tabler, on ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appInstanceDo) Group(cols ...field.Expr) IAppInstanceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appInstanceDo) Having(conds ...gen.Condition) IAppInstanceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appInstanceDo) Limit(limit int) IAppInstanceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appInstanceDo) Offset(offset int) IAppInstanceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppInstanceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appInstanceDo) Unscoped() IAppInstanceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appInstanceDo) Create(values ...*model.AppInstance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appInstanceDo) CreateInBatches(values []*model.AppInstance, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appInstanceDo) Save(values ...*model.AppInstance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appInstanceDo) First() (*model.AppInstance, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInstance), nil
	}
}

func (a appInstanceDo) Take() (*model.AppInstance, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInstance), nil
	}
}

func (a appInstanceDo) Last() (*model.AppInstance, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInstance), nil
	}
}

func (a appInstanceDo) Find() ([]*model.AppInstance, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppInstance), err
}

func (a appInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppInstance, err error) {
	buf := make([]*model.AppInstance, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appInstanceDo) FindInBatches(result *[]*model.AppInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appInstanceDo) Attrs(attrs ...field.AssignExpr) IAppInstanceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appInstanceDo) Assign(attrs ...field.AssignExpr) IAppInstanceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appInstanceDo) Joins(fields ...field.RelationField) IAppInstanceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appInstanceDo) Preload(fields ...field.RelationField) IAppInstanceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appInstanceDo) FirstOrInit() (*model.AppInstance, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInstance), nil
	}
}

func (a appInstanceDo) FirstOrCreate() (*model.AppInstance, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInstance), nil
	}
}

func (a appInstanceDo) FindByPage(offset int, limit int) (result []*model.AppInstance, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appInstanceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appInstanceDo) Delete(models ...*model.AppInstance) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appInstanceDo) withDO(do gen.Dao) *appInstanceDo {
	a.DO = *do.(*gen.DO)
	return a
}
