// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm-gen-demo/dal/model"
)

func newAppPackage(db *gorm.DB, opts ...gen.DOOption) appPackage {
	_appPackage := appPackage{}

	_appPackage.appPackageDo.UseDB(db, opts...)
	_appPackage.appPackageDo.UseModel(&model.AppPackage{})

	tableName := _appPackage.appPackageDo.TableName()
	_appPackage.ALL = field.NewAsterisk(tableName)
	_appPackage.ID = field.NewInt64(tableName, "id")
	_appPackage.PackageID = field.NewString(tableName, "package_id")
	_appPackage.PackageName = field.NewString(tableName, "package_name")
	_appPackage.PackageLabel = field.NewString(tableName, "package_label")
	_appPackage.PackageVersion = field.NewString(tableName, "package_version")
	_appPackage.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_appPackage.Status = field.NewInt32(tableName, "status")
	_appPackage.DelFlag = field.NewString(tableName, "del_flag")
	_appPackage.CreateTime = field.NewTime(tableName, "create_time")
	_appPackage.UpdateTime = field.NewTime(tableName, "update_time")
	_appPackage.DeleteTime = field.NewTime(tableName, "delete_time")
	_appPackage.Remark = field.NewString(tableName, "remark")

	_appPackage.fillFieldMap()

	return _appPackage
}

type appPackage struct {
	appPackageDo appPackageDo

	ALL            field.Asterisk
	ID             field.Int64
	PackageID      field.String // 应用包id
	PackageName    field.String // 应用包名称
	PackageLabel   field.String // 应用包标签
	PackageVersion field.String // 应用包版本
	CreateUserID   field.Int64  // 创建用户
	Status         field.Int32  // 0可用1禁用
	DelFlag        field.String // 0可用1已删除
	CreateTime     field.Time
	UpdateTime     field.Time
	DeleteTime     field.Time
	Remark         field.String // 备注

	fieldMap map[string]field.Expr
}

func (a appPackage) Table(newTableName string) *appPackage {
	a.appPackageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appPackage) As(alias string) *appPackage {
	a.appPackageDo.DO = *(a.appPackageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appPackage) updateTableName(table string) *appPackage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.PackageID = field.NewString(table, "package_id")
	a.PackageName = field.NewString(table, "package_name")
	a.PackageLabel = field.NewString(table, "package_label")
	a.PackageVersion = field.NewString(table, "package_version")
	a.CreateUserID = field.NewInt64(table, "create_user_id")
	a.Status = field.NewInt32(table, "status")
	a.DelFlag = field.NewString(table, "del_flag")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.DeleteTime = field.NewTime(table, "delete_time")
	a.Remark = field.NewString(table, "remark")

	a.fillFieldMap()

	return a
}

func (a *appPackage) WithContext(ctx context.Context) IAppPackageDo {
	return a.appPackageDo.WithContext(ctx)
}

func (a appPackage) TableName() string { return a.appPackageDo.TableName() }

func (a appPackage) Alias() string { return a.appPackageDo.Alias() }

func (a appPackage) Columns(cols ...field.Expr) gen.Columns { return a.appPackageDo.Columns(cols...) }

func (a *appPackage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appPackage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["package_id"] = a.PackageID
	a.fieldMap["package_name"] = a.PackageName
	a.fieldMap["package_label"] = a.PackageLabel
	a.fieldMap["package_version"] = a.PackageVersion
	a.fieldMap["create_user_id"] = a.CreateUserID
	a.fieldMap["status"] = a.Status
	a.fieldMap["del_flag"] = a.DelFlag
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["delete_time"] = a.DeleteTime
	a.fieldMap["remark"] = a.Remark
}

func (a appPackage) clone(db *gorm.DB) appPackage {
	a.appPackageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appPackage) replaceDB(db *gorm.DB) appPackage {
	a.appPackageDo.ReplaceDB(db)
	return a
}

type appPackageDo struct{ gen.DO }

type IAppPackageDo interface {
	gen.SubQuery
	Debug() IAppPackageDo
	WithContext(ctx context.Context) IAppPackageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppPackageDo
	WriteDB() IAppPackageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppPackageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppPackageDo
	Not(conds ...gen.Condition) IAppPackageDo
	Or(conds ...gen.Condition) IAppPackageDo
	Select(conds ...field.Expr) IAppPackageDo
	Where(conds ...gen.Condition) IAppPackageDo
	Order(conds ...field.Expr) IAppPackageDo
	Distinct(cols ...field.Expr) IAppPackageDo
	Omit(cols ...field.Expr) IAppPackageDo
	Join(table schema.Tabler, on ...field.Expr) IAppPackageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppPackageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppPackageDo
	Group(cols ...field.Expr) IAppPackageDo
	Having(conds ...gen.Condition) IAppPackageDo
	Limit(limit int) IAppPackageDo
	Offset(offset int) IAppPackageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppPackageDo
	Unscoped() IAppPackageDo
	Create(values ...*model.AppPackage) error
	CreateInBatches(values []*model.AppPackage, batchSize int) error
	Save(values ...*model.AppPackage) error
	First() (*model.AppPackage, error)
	Take() (*model.AppPackage, error)
	Last() (*model.AppPackage, error)
	Find() ([]*model.AppPackage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppPackage, err error)
	FindInBatches(result *[]*model.AppPackage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppPackage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppPackageDo
	Assign(attrs ...field.AssignExpr) IAppPackageDo
	Joins(fields ...field.RelationField) IAppPackageDo
	Preload(fields ...field.RelationField) IAppPackageDo
	FirstOrInit() (*model.AppPackage, error)
	FirstOrCreate() (*model.AppPackage, error)
	FindByPage(offset int, limit int) (result []*model.AppPackage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppPackageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appPackageDo) Debug() IAppPackageDo {
	return a.withDO(a.DO.Debug())
}

func (a appPackageDo) WithContext(ctx context.Context) IAppPackageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appPackageDo) ReadDB() IAppPackageDo {
	return a.Clauses(dbresolver.Read)
}

func (a appPackageDo) WriteDB() IAppPackageDo {
	return a.Clauses(dbresolver.Write)
}

func (a appPackageDo) Session(config *gorm.Session) IAppPackageDo {
	return a.withDO(a.DO.Session(config))
}

func (a appPackageDo) Clauses(conds ...clause.Expression) IAppPackageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appPackageDo) Returning(value interface{}, columns ...string) IAppPackageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appPackageDo) Not(conds ...gen.Condition) IAppPackageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appPackageDo) Or(conds ...gen.Condition) IAppPackageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appPackageDo) Select(conds ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appPackageDo) Where(conds ...gen.Condition) IAppPackageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appPackageDo) Order(conds ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appPackageDo) Distinct(cols ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appPackageDo) Omit(cols ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appPackageDo) Join(table schema.Tabler, on ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appPackageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appPackageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appPackageDo) Group(cols ...field.Expr) IAppPackageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appPackageDo) Having(conds ...gen.Condition) IAppPackageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appPackageDo) Limit(limit int) IAppPackageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appPackageDo) Offset(offset int) IAppPackageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appPackageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppPackageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appPackageDo) Unscoped() IAppPackageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appPackageDo) Create(values ...*model.AppPackage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appPackageDo) CreateInBatches(values []*model.AppPackage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appPackageDo) Save(values ...*model.AppPackage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appPackageDo) First() (*model.AppPackage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppPackage), nil
	}
}

func (a appPackageDo) Take() (*model.AppPackage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppPackage), nil
	}
}

func (a appPackageDo) Last() (*model.AppPackage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppPackage), nil
	}
}

func (a appPackageDo) Find() ([]*model.AppPackage, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppPackage), err
}

func (a appPackageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppPackage, err error) {
	buf := make([]*model.AppPackage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appPackageDo) FindInBatches(result *[]*model.AppPackage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appPackageDo) Attrs(attrs ...field.AssignExpr) IAppPackageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appPackageDo) Assign(attrs ...field.AssignExpr) IAppPackageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appPackageDo) Joins(fields ...field.RelationField) IAppPackageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appPackageDo) Preload(fields ...field.RelationField) IAppPackageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appPackageDo) FirstOrInit() (*model.AppPackage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppPackage), nil
	}
}

func (a appPackageDo) FirstOrCreate() (*model.AppPackage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppPackage), nil
	}
}

func (a appPackageDo) FindByPage(offset int, limit int) (result []*model.AppPackage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appPackageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appPackageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appPackageDo) Delete(models ...*model.AppPackage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appPackageDo) withDO(do gen.Dao) *appPackageDo {
	a.DO = *do.(*gen.DO)
	return a
}
